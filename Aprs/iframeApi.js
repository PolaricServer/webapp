var polaric = null;
var api_calls = new  Array();
var api_serial = 0;

window.onmessage = _receiveMessage; 

/* Receive return message from a remote function call */
function _receiveMessage(e)
{   
  e = (e)?e:((event)?event:null);
  var args = e.data.split("##");
  var op = args[0];
  var f = api_calls[op]; 
  if (f)
    f(args[1]);
  delete api_calls[op];
}


function findItem(x,y) { polaric.findItem(x,y); }
function gotoPos(x,y) { polaric.gotoPos(x,y); }


function init_polaric(iframeid, serverdomain)
{ 
  polaric = new polaricApi(iframeid, serverdomain); 
}


function polaricApi(iframeid, serverdomain) {
   this.domain = serverdomain;
   this.frame = document.getElementById(iframeid).contentWindow; 
}



/*
 * Invoke a 'remote' function 
 * cback - optional callback function to receive return message
 */
polaricApi.prototype.invoke = function(op, arg, cback)
{ 
  if (cback) {  
     api_serial = (api_serial + 1) % 100000;
     op = op + "#" + api_serial;
     api_calls[op] = cback;
     setTimeout( function() 
       { delete api_calls[op]; 
         /* FIXME should issue warning in console */ }, 500);
  }
  this.frame.postMessage(op+"##"+arg, this.domain);   
}

/* IDEA: consider a function to subscribe/unsubscribe to asynchronous updates */


/* Can these be autogenerated? */


polaricApi.prototype.zoomIn = function()
  { this.invoke("zoomIn"); }

polaricApi.prototype.zoomOut = function()
  { this.invoke("zoomOut"); }
  
polaricApi.prototype.labelUp = function()
  { this.invoke("labelUp"); }

polaricApi.prototype.labelDown = function()
  { this.invoke("labelDown"); } 

polaricApi.prototype.zoomScale = function(scale)
  { this.invoke("zoomScale", scale);}
  
polaricApi.prototype.gotoPos = function(easting, northing)
  { this.invoke("gotoPos", easting+"##"+northing);}
  
polaricApi.prototype.gotoUtm = function(zone, easting, northing)
  { this.invoke("gotoUtm", zone+"##"+easting+"##"+northing);}

polaricApi.prototype.findItem = function(ident, show)
  { this.invoke("findItem", ident, (show ? "T" : "F")); }

polaricApi.prototype.searchItems = function(filter, divid)
  { this.invoke("searchItems", filter, function(x) {document.getElementById(divid).innerHTML=x;} ); }

polaricApi.prototype.searchNames = function(filter, divid)
  { this.invoke("searchNames", filter, function(x) {document.getElementById(divid).innerHTML=x;} ); }

polaricApi.prototype.selectMap = function(ident)
  { this.invoke("selectMap", ident); }
  
polaricApi.prototype.selectBaseLayer = function(ident)
  { this.invoke("selectBaseLayer", ident); }  
